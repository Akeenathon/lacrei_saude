name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - run: |
          python -m pip install --upgrade pip
          pip install flake8
          pip install -r requirements.txt

      - run: flake8 .

  test:
    name: Testes
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - run: python manage.py test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_db
          DB_USER: postgres
          DB_PASSWORD: postgres

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - run: echo "Build concluído com sucesso!"

  deploy:
    name: Deploy EC2
    runs-on: ubuntu-latest
    needs: build
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v3

      - name: Configurar known_hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.HOST_KEY }}" >> ~/.ssh/known_hosts

      - name: Adicionar chave SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Testar acesso SSH
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo '✅ Conexão SSH estabelecida com sucesso!'"

      - name: Copiar arquivos para EC2
        run: |
          rsync -avz \
            -e "ssh -o StrictHostKeyChecking=no" \
            --exclude='.git*' --exclude='venv*' --exclude='__pycache__*' ./ \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/lacrei_saude

      - name: Deploy remoto via SSH
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/${{ secrets.EC2_USER }}/lacrei_saude
            docker-compose down
            docker-compose up -d --build
            
            # Aguardar containers subirem
            sleep 30
            
            # Executar migrações e collectstatic
            docker-compose exec -T web python manage.py migrate
            docker-compose exec -T web python manage.py collectstatic --noinput
          EOF